#!/usr/bin/env perl6

use lib 'lib';
use ICFP;
use Data::Dump::Tree;

use MONKEY-SEE-NO-EVAL;

say "Started!";

# Get the current status, don't use cache
my $use-cache = !%*ENV<NOCACHE>.Bool;
my $status-list = api-call('snapshot/list', use-cache => $use-cache);

# The lastmost one is the one we want
my $status-hash = $status-list<snapshots>[*-1]<snapshot_hash>;
# my $status-hash = $status-list<snapshots>[10]<snapshot_hash>;
say "Loading contest state $status-hash";
my $game-state = get-blob($status-hash);

# Get the list of problems
my @problem_hashes = $game-state<problems>.list;
my @problems;
my %problem_by_id;

say "Loading problems";
for @problem_hashes.sort(*<problem_id> <=> *<problem_id>) -> $problem_hash {
  my $problem-spec = get-blob($problem_hash<problem_spec_hash>, :!decode-json);
  %problem_by_id{$problem_hash<problem_id>} = $problem_hash;
  %problem_by_id{$problem_hash<problem_id>}<spec> = $problem-spec;
  push @problems, $problem-spec;
}

multi MAIN("ls") {
  say "ID\tsize\tssize\thash";
  for @problem_hashes.sort(*<problem_id> <=> *<problem_id>) -> $problem_hash {
    say $problem_hash<problem_id problem_size solution_size problem_spec_hash>.join("\t");
  }
}

multi MAIN("get-spec", $id) {
  say %problem_by_id{$id}<spec>;
}

multi MAIN("repl") {
  my $p = Problem::Grammar.parse-problem(@problems[0]);
  LREP::here;
}

multi MAIN("help") {
  say "hmm...";
}

multi MAIN("send-all-trivial") {
  my $boring-solution = q:to/END/;
    4
    0,0
    0,1
    1,1
    1,0
    1
    4 0 1 2 3
    0,0
    0,1
    1,1
    1,0
    END

  for @problem_hashes -> $problem_hash {
    my $id = $problem_hash<problem_id>;
    if $id > 1000 {
      say "Sending $id";
      send-solution($id, $boring-solution);
    }
  }
}

multi MAIN("send-semi-trivial") {
  my $count = 1;
  for @problem_hashes.sort(*<problem_id> <=> *<problem_id>) -> $problem_hash {
    my $id = $problem_hash<problem_id>;
next unless $id > 6258;
    $count++;
    my $solution = shifted-solution( $problem_hash<spec> );
    say "Sending $id";
    send-solution($id, $solution);
    if ( $count == 1000 ) {
        say "Sent 1000. Quitting.\n";
        last;
    }
  }
}

multi MAIN("origami") {
  my $origami = Origami.new;
  # $g.fold-all( (0,0), (1,1) );
  # $g.fold-all( (0,0.5), (1,0.5) );
  # $g.fold-all( (1, <1/9>), (0.5, 0) );
  # $g.fold-all( (0,1), (1,0) );
  # $g.fold-all( (0,0), (1,0) );

  $origami.draw-file('out.png');
  my $problem = Problem::Grammar.parse-problem( %problem_by_id{527}<spec> );
  my $problem-polygon = $problem.silhouette.silhouette-polygon;

  $problem.draw-file('out.png');
  say %problem_by_id{527};
  $*IN.get;

  my $best_score = $origami.resemblance($problem-polygon);

  loop {
    my $tmp-origami = $origami.clone;
    $tmp-origami.fold-all( (rand.Rat, rand.Rat), (rand.Rat, rand.Rat) );
    $tmp-origami.draw-file('out.png');
    say "Checking against {$problem-polygon}";
    my $current = $tmp-origami.resemblance($problem-polygon);
    say "Best: $best_score current: $current";
    if $best_score < $current {
      $origami = $tmp-origami;
      $best_score = $current;
      say $origami.generate-solution;
      $*IN.get;
    }

  }


  # say $g.score_for($p);

  # $g.fold-all( (0, 0), (1, 1) );
  # say $g.generate-solution;

  LREP::here;

}

multi MAIN("polygons") {
  my $p1 = Polygon.new;
  $p1.add-vertex(0.0,0.0);
  $p1.add-vertex(1.0,0.0);
  $p1.add-vertex(1.0,1.0);
  $p1.add-vertex(0.0,1.0);

  my $p2 = Polygon.new;
  $p2.add-vertex(0.5,0.5);
  $p2.add-vertex(1.5,0.5);
  $p2.add-vertex(1.5,1.5);
  $p2.add-vertex(0.5,1.5);

  my $p3 = $p1.clip('INTERSECTION', $p2);
  say "New polygon: #{$p3.gist}";
  say "Area: #{$p3.area}";

  LREP::here;
}

multi MAIN("resemblance_test") {
  my $o = Origami.new;

  my $pl = Polygon.new;
  $pl.add-vertex(0.5,0.5);
  $pl.add-vertex(1.5,0.5);
  $pl.add-vertex(1.5,1.5);
  $pl.add-vertex(0.5,1.5);

  my $res = $o.resemblance( $pl );
  say "resemblance is $res";
#  LREP::here;
}

multi MAIN("all-images") {
    for %problem_by_id.kv -> $index, $problem {
        my $p = Problem::Grammar.parse-problem( $problem<spec> );

        my $image = Imager.new(xsize => 1000, ysize => 1000);
        $image.polyline( points => [ [0,0], [0,999], [999,999], [999,0], [0,0] ], color => 'red');
        $p.draw($image);
        $image.flip(dir => 'v');
        $image.write(file => "images/problem_$index.png");
    }
}

